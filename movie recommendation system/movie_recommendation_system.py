# -*- coding: utf-8 -*-
"""Movie_Recomandation_System.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1Dzpx4rfe5lDC1sbvomXaXllB1l-le42s
"""

import pandas as pd
import matplotlib.pyplot as plt
import numpy as np
from sklearn.feature_extraction.text import TfidfVectorizer
from sklearn.metrics.pairwise import linear_kernel
df=pd.read_csv("/content/movies_dataset.csv")
df

df.head(10)

# Preprocessing: Combine relevant text columns into a single feature
df['combined_features'] = df['Genres'] + ' ' + df['Keywords'] + ' ' + df['Cast'] + ' ' + df['Director']

# Initialize TF-IDF Vectorizer
tfidf = TfidfVectorizer(stop_words='english')

# Fit and transform the data
tfidf_matrix = tfidf.fit_transform(df['combined_features'])

# Compute similarity matrix
cosine_sim = linear_kernel(tfidf_matrix, tfidf_matrix)

def recommend_movies(title, cosine_sim=cosine_sim):
    # Get the index of the movie that matches the title
    idx = df[df['Title'] == title].index[0]

    # Get the pairwise similarity scores of all movies with that movie
    sim_scores = list(enumerate(cosine_sim[idx]))

    # Sort the movies based on the similarity scores
    sim_scores = sorted(sim_scores, key=lambda x: x[1], reverse=True)

    # Get the scores of the 10 most similar movies
    sim_scores = sim_scores[1:11]

    # Get the movie indices
    movie_indices = [i[0] for i in sim_scores]

    # Return the top 10 most similar movies
    return df[['Title', 'Ratings']].iloc[movie_indices]

recommend_movies('Second more.')

recommended_movies=recommend_movies('Enough increase.')
plt.figure(figsize=(10, 6))
plt.barh(recommended_movies['Title'], recommended_movies['Ratings'], color='green')
plt.xlabel('Ratings')
plt.title('Recommended Movies')
plt.gca().invert_yaxis()  # Invert y-axis to display the highest rating on top
plt.show()

recommended_movies=recommend_movies('Help try occur start.')

plt.figure(figsize=(10, 6))
plt.barh(recommended_movies['Title'], recommended_movies['Ratings'], color='blue')
plt.xlabel('Ratings')
plt.title('Recommended Movies')
plt.gca().invert_yaxis()  # Invert y-axis to display the highest rating on top
plt.show()

recommended_movies=recommend_movies('Order environment world.')

plt.figure(figsize=(10, 6))
plt.barh(recommended_movies['Title'], recommended_movies['Ratings'], color='orange')
plt.xlabel('Ratings')
plt.title('Recommended Movies')
plt.gca().invert_yaxis()  # Invert y-axis to display the highest rating on top
plt.show()

recommended_movies = recommend_movies('Second more.')

plt.figure(figsize=(10, 6))
plt.barh(recommended_movies['Title'], recommended_movies['Ratings'], color='violet')
plt.xlabel('Ratings')
plt.title('Recommended Movies')
plt.gca().invert_yaxis()  # Invert y-axis to display the highest rating on top
plt.show()

recommended_movies=recommend_movies('Interesting work.')
plt.figure(figsize=(10, 6))
plt.scatter(recommended_movies['Title'], recommended_movies['Ratings'], color='red', marker='o')
plt.xlabel('Movie Title')
plt.ylabel('Ratings')
plt.title('Recommended Movies')
plt.xticks(rotation=45, ha='right')  # Rotate x-axis labels for better readability
plt.grid(True)
plt.tight_layout()
plt.show()

recommended_movies=recommend_movies('Interesting work.')
recommended_movies
